package com.wys.geektime.designMode.oop;

/**
 * @author wangyasheng
 * @date 2021/1/21
 * @Describe: 理论二：封装、抽象、继承、多态分别可以解决哪些编程问题？
 */

/**
 *  1、封装
 *
 *  what：封装也叫做信息隐藏或者数据保护。类通过暴露有限的访问接口，授权
 *  外部仅能通关类提供的方式来访问内部信息或者数据。
 *
 *  how：它需要编程语言提供权限访问控制语法来支持。
 *
 *  why：封装的意义，一方面是保护数据不被随意修改，提高代码的可维护性；
 *  另一方面是仅暴露有限的必要接口，提高累的易用性。
 */

/**
 * 2、抽象
 *
 * what：抽象是讲如何隐藏方法的具体实现，让使用者只需要关心方法提供了哪些
 * 功能，不需要知道这些功能是如何是现在的。
 *
 * how：抽象可以通过接口类或者抽象类来实现，但也并不需要特殊的语法机制来支持。
 *
 * why：抽象存在的意义，一方面是提高代码的可扩展性、维护性，修改实现不需要改变定义，
 * 减少代码的改动范围；另一方面，它也是处理复杂系统的有效手段，能有效地过滤掉
 * 不必要关注的信息。
 *
 * tips：抽象的概念是一个非常通用的设计思想，并不单单用在面向对象编程中，也可以
 * 用来指导架构设计等。而且这个特性也并不需要编程语言提供特殊的语法机制来支持，
 * 只需要提供"函数"这一非常基础的语法机制，就可以实现抽象特性，所以它没有
 * 很强的'特异性'，有时候并不被看作面向对象编程的特性之一。
 */

/**
 * 3、继承
 *
 * what：继承是用来表示类之间的is-a关系，分为两种模式：单继承和多继承。
 * 单继承表示一个子类只能继承一个父类，多继承表示一个子类可以继承多个父类。
 *
 * how：为了实现继承这个特性，编程语言需要提供特殊的语法机制来支持（例如 java中的extends）。
 *
 * why：继承只要是用来解决代码复用的问题。
 *
 * tips：继承的概念很好理解，也很容易使用。不过，过度使用继承，继承层次
 * 过深过复杂，就会导致代码的可读性、可维护性变差。还有，子类和父类高度
 * 耦合，修改父类的代码，会直接影响到子类。"多用组合少用继承"
 */

/**
 * 4、多态
 *
 * what：多态是指子类可以替换父类，在实际的代码运行过程中，调用子类
 * 的方法实现。
 *
 * how：多态这种特性也需要编程语言提供特殊的语法机制来实现，比如继承、接口类。
 *
 * why：多态可以提高代码的扩展性和复用性，是很多设计模式、设计原则、编程技巧
 * 的代码实现基础。
 */

/**
 * tips：为什么Java不支持多继承？
 *
 * Java不支持多重继承的原因是因为多重继承有副作用：钻石问题（菱形继承）。
 *
 * 假设类B、C继承自类A，且都重写了类A中的同一个方法，而类D同时继承B、C，
 * 那么此时类D会继承B、C的方法，那对于B、C重写的A中的方法，类D
 * 会继承哪一个呢？这里就会产生歧义。考虑到这种二义性问题，Java不支持多重继承。
 *
 * 而接口支持多继承因为接口定义的方法不能有方法体，所以不会出现决议问题。
 * 而从jdk1.8开始，接口可以有默认方法(方法要用default标识)，必须要有方法体，
 * 这样在接口多继承上不也会有决议问题吗？其实你去试下就知道了，java发现这种情况，
 * 会通过让你强制在子接口中重写这个默认方法，这样就不会有决议问题了
 */
class Chapter02_4features {
}
